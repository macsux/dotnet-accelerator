accelerator:
  displayName: Tanzu .NET Web API
  description: An enterprise template for building .NET applications in C#
  iconUrl: https://iconape.com/wp-content/files/km/370669/svg/370669.svg
  tags:
  - C#
  - project
  options:
  - name: namespace
    label: Namespace
    dataType: string
    description: Root namespace for the project
    inputType: text
    defaultValue: MyNamespace
    required: true
  - name: database
    label: Database
    dataType: string
    description: The type of database to use
    inputType: radio
    defaultValue: postgresql
    required: true
    choices:
    - value: postgresql
      text: PostgreSQL
    - value: mysql
      text: MySQL
  - name: configserver
    label: Config Server
    dataType: boolean
    description: Enable config server integration
    inputType: checkbox
    defaultValue: true
    required: true
  - name: enableSecurity
    label: Enable Security
    dataType: boolean
    description: Enable security via JWT resource server
    inputType: checkbox
    defaultValue: true
    required: true
engine:
  let:
  - name: postgresql
    expression: (#database=="postgresql")
  - name: mysql
    expression: (#database=="mysql")
  - name: sourceNameLower
    expression: '#artifactId.toLowerCase()'
  merge:
  - include:
    - '**'
    exclude:
    - .template.config/**
    - src/DotnetAccelerator/Security/**
    - '**/*MySQL*'
    - '**/*PostgreSQL*'
    - '**/*PostgreSQL*'
    - '**/Migrations/**'
  - include:
    - src/DotnetAccelerator/Security/**
    condition: '#enableSecurity'
  - include:
    - '**/*MySQL*'
    condition: '#mysql'
  - include:
    - '**/*PostgreSQL*'
    - '**/*PostgreSQL*'
    condition: '#postgresql'
  - include:
    - src/MyProjectGroup.Common/MyProjectGroup.Common.csproj
    chain:
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if configserver -->
                  <PackageReference Include="Steeltoe.Extensions.Configuration.ConfigServerCore" Version="3.1.3" />
                  <!--#endif -->
        with: "''"
      condition: '!(#configserver)'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if configserver -->
                  <PackageReference Include="Steeltoe.Extensions.Configuration.ConfigServerCore" Version="3.1.3" />
                  <!--#endif -->
        with: "'        <PackageReference Include=\"Steeltoe.Extensions.Configuration.ConfigServerCore\" Version=\"3.1.3\" />'"
      condition: '#configserver'
  - include:
    - src/MyProjectGroup.DotnetAccelerator/MyProjectGroup.DotnetAccelerator.csproj
    chain:
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if enableSecurity -->
                  <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="6.0.3" />
                  <PackageReference Include="idunno.Authentication.Basic" Version="2.2.3" />
                  <!--#endif -->
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if enableSecurity -->
                  <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="6.0.3" />
                  <PackageReference Include="idunno.Authentication.Basic" Version="2.2.3" />
                  <!--#endif -->
        with: |-
          '        <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="6.0.3" />
                  <PackageReference Include="idunno.Authentication.Basic" Version="2.2.3" />'
      condition: '#enableSecurity'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if postgresql -->
                  <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="6.0.3" />
                  <!--#endif -->
        with: "''"
      condition: '!(#postgresql)'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if postgresql -->
                  <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="6.0.3" />
                  <!--#endif -->
        with: "'        <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"6.0.3\" />'"
      condition: '#postgresql'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if mysql -->
                  <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="6.0.1" />
                  <!--#endif -->
        with: "''"
      condition: '!(#mysql)'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if mysql -->
                  <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="6.0.1" />
                  <!--#endif -->
        with: "'        <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"6.0.1\" />'"
      condition: '#mysql'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if configserver -->
                  <PackageReference Include="Steeltoe.Extensions.Configuration.ConfigServerCore" Version="$(SteeltoeVersion)" />
                  <!--#endif -->
        with: "''"
      condition: '!(#configserver)'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if configserver -->
                  <PackageReference Include="Steeltoe.Extensions.Configuration.ConfigServerCore" Version="$(SteeltoeVersion)" />
                  <!--#endif -->
        with: "'        <PackageReference Include=\"Steeltoe.Extensions.Configuration.ConfigServerCore\" Version=\"$(SteeltoeVersion)\" />'"
      condition: '#configserver'
  - include:
    - config/application-Development.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io'
      condition: '#enableSecurity'
  - include:
    - config/application.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://accounts.google.com'
      condition: '#enableSecurity'
  - include:
    - src/MyProjectGroup.DotnetAccelerator/Program.cs
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          using Microsoft.AspNetCore.Authentication.JwtBearer;
          #endif
        with: "''"
      - text: |-
          #if enableSecurity
          services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
              .AddJwtBearer(cfg =>
              {
                  cfg.ForwardDefaultSelector = httpContext => (httpContext.Request.Path.StartsWithSegments("/actuator")? BasicAuthenticationDefaults.AuthenticationScheme : null)!;
                  configuration.GetSection($"Authentication:{JwtBearerDefaults.AuthenticationScheme}").Bind(cfg);
              });
          services.AddAuthorization(authz =>
          {
              authz.AddPolicy(KnownAuthorizationPolicy.AirportRead, policy => policy.RequireScope(KnownScope.Read));
              authz.AddPolicy(KnownAuthorizationPolicy.WeatherRead, policy => policy.RequireScope(KnownScope.Read));
              authz.AddPolicy(KnownAuthorizationPolicy.WeatherWrite, policy => policy.RequireScope(KnownScope.Write));
          });
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          using Microsoft.AspNetCore.Authentication.JwtBearer;
          #endif
        with: "'using Microsoft.AspNetCore.Authentication.JwtBearer;'"
      - text: |-
          #if enableSecurity
          services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
              .AddJwtBearer(cfg =>
              {
                  cfg.ForwardDefaultSelector = httpContext => (httpContext.Request.Path.StartsWithSegments("/actuator")? BasicAuthenticationDefaults.AuthenticationScheme : null)!;
                  configuration.GetSection($"Authentication:{JwtBearerDefaults.AuthenticationScheme}").Bind(cfg);
              });
          services.AddAuthorization(authz =>
          {
              authz.AddPolicy(KnownAuthorizationPolicy.AirportRead, policy => policy.RequireScope(KnownScope.Read));
              authz.AddPolicy(KnownAuthorizationPolicy.WeatherRead, policy => policy.RequireScope(KnownScope.Read));
              authz.AddPolicy(KnownAuthorizationPolicy.WeatherWrite, policy => policy.RequireScope(KnownScope.Write));
          });
          #endif
        with: |-
          'services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
              .AddJwtBearer(cfg =>
              {
                  cfg.ForwardDefaultSelector = httpContext => (httpContext.Request.Path.StartsWithSegments("/actuator")? BasicAuthenticationDefaults.AuthenticationScheme : null)!;
                  configuration.GetSection($"Authentication:{JwtBearerDefaults.AuthenticationScheme}").Bind(cfg);
              });
          services.AddAuthorization(authz =>
          {
              authz.AddPolicy(KnownAuthorizationPolicy.AirportRead, policy => policy.RequireScope(KnownScope.Read));
              authz.AddPolicy(KnownAuthorizationPolicy.WeatherRead, policy => policy.RequireScope(KnownScope.Read));
              authz.AddPolicy(KnownAuthorizationPolicy.WeatherWrite, policy => policy.RequireScope(KnownScope.Write));
          });'
      condition: '#enableSecurity'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if configserver
          using Steeltoe.Extensions.Configuration.ConfigServer;
          #endif
        with: "''"
      - text: |-
          #if configserver
          services.AddConfigServerHealthContributor();
          #endif
        with: "''"
      condition: '!(#configserver)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if configserver
          using Steeltoe.Extensions.Configuration.ConfigServer;
          #endif
        with: "'using Steeltoe.Extensions.Configuration.ConfigServer;'"
      - text: |-
          #if configserver
          services.AddConfigServerHealthContributor();
          #endif
        with: "'services.AddConfigServerHealthContributor();'"
      condition: '#configserver'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if postgresql
                  case DbType.PostgreSQL:
                      opt.UseNpgsql(connectionString);
                      break;
          #endif
        with: "''"
      condition: '!(#postgresql)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if postgresql
                  case DbType.PostgreSQL:
                      opt.UseNpgsql(connectionString);
                      break;
          #endif
        with: |-
          '        case DbType.PostgreSQL:
                      opt.UseNpgsql(connectionString);
                      break;'
      condition: '#postgresql'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if mysql
                  case DbType.MySQL:
                      opt.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));
                      break;
          #endif
        with: "''"
      condition: '!(#mysql)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if mysql
                  case DbType.MySQL:
                      opt.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));
                      break;
          #endif
        with: |-
          '        case DbType.MySQL:
                      opt.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));
                      break;'
      condition: '#mysql'
  - include:
    - src/MyProjectGroup.Common/Configuration/ConfigurationBuilderExtensions.cs
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if configserver
          using Steeltoe.Extensions.Configuration.ConfigServer;
          #endif
        with: "''"
      - text: |-
          #if configserver
                      bootstrapConfigBuilder.AddEnvironmentVariables()
                      .AddCommandLine(Environment.GetCommandLineArgs())
                      .AddProfiles();
                      BootstrapLoggerFactory.Update(bootstrapConfigBuilder.Build());
                      bootstrapConfigBuilder.AddConfigServer(environment, BootstrapLoggerFactory.Instance);
          #endif
        with: "''"
      condition: '!(#configserver)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if configserver
          using Steeltoe.Extensions.Configuration.ConfigServer;
          #endif
        with: "'using Steeltoe.Extensions.Configuration.ConfigServer;'"
      - text: |-
          #if configserver
                      bootstrapConfigBuilder.AddEnvironmentVariables()
                      .AddCommandLine(Environment.GetCommandLineArgs())
                      .AddProfiles();
                      BootstrapLoggerFactory.Update(bootstrapConfigBuilder.Build());
                      bootstrapConfigBuilder.AddConfigServer(environment, BootstrapLoggerFactory.Instance);
          #endif
        with: |-
          '            bootstrapConfigBuilder.AddEnvironmentVariables()
                      .AddCommandLine(Environment.GetCommandLineArgs())
                      .AddProfiles();
                      BootstrapLoggerFactory.Update(bootstrapConfigBuilder.Build());
                      bootstrapConfigBuilder.AddConfigServer(environment, BootstrapLoggerFactory.Instance);'
      condition: '#configserver'
  - include:
    - src/MyProjectGroup.DotnetAccelerator/bin/.buildsync/config/solution-defaults.Development.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io'
      condition: '#enableSecurity'
  - include:
    - src/MyProjectGroup.DotnetAccelerator/bin/.buildsync/config/solution-defaults.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://accounts.google.com'
      condition: '#enableSecurity'
  - include:
    - src/MyProjectGroup.DotnetAccelerator/Properties/launchSettings.json
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          //#if postgresql
              "DotnetAccelerator - PostgreSQL: ": {
                "commandName": "Project",
                "dotnetRunMessages": "true",
                "launchBrowser": true,
                "applicationUrl": "https://localhost:5001;http://localhost:5000;http://localhost:8090",
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development",
                  "SPRING:PROFILES:ACTIVE": "LocalPostgreSQL"
                }
              },
          //#endif
        with: "''"
      condition: '!(#postgresql)'
    - type: ReplaceText
      substitutions:
      - text: |-
          //#if postgresql
              "DotnetAccelerator - PostgreSQL: ": {
                "commandName": "Project",
                "dotnetRunMessages": "true",
                "launchBrowser": true,
                "applicationUrl": "https://localhost:5001;http://localhost:5000;http://localhost:8090",
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development",
                  "SPRING:PROFILES:ACTIVE": "LocalPostgreSQL"
                }
              },
          //#endif
        with: |-
          '    "DotnetAccelerator - PostgreSQL: ": {
                "commandName": "Project",
                "dotnetRunMessages": "true",
                "launchBrowser": true,
                "applicationUrl": "https://localhost:5001;http://localhost:5000;http://localhost:8090",
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development",
                  "SPRING:PROFILES:ACTIVE": "LocalPostgreSQL"
                }
              },'
      condition: '#postgresql'
    - type: ReplaceText
      substitutions:
      - text: |-
          //#if mysql
              "DotnetAccelerator - MySQL: ": {
                "commandName": "Project",
                "dotnetRunMessages": "true",
                "launchBrowser": true,
                "applicationUrl": "https://localhost:5001;http://localhost:5000;http://localhost:8090",
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development",
                  "SPRING:PROFILES:ACTIVE": "LocalMySQL"
                }
              },
          //#endif
        with: "''"
      condition: '!(#mysql)'
    - type: ReplaceText
      substitutions:
      - text: |-
          //#if mysql
              "DotnetAccelerator - MySQL: ": {
                "commandName": "Project",
                "dotnetRunMessages": "true",
                "launchBrowser": true,
                "applicationUrl": "https://localhost:5001;http://localhost:5000;http://localhost:8090",
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development",
                  "SPRING:PROFILES:ACTIVE": "LocalMySQL"
                }
              },
          //#endif
        with: |-
          '    "DotnetAccelerator - MySQL: ": {
                "commandName": "Project",
                "dotnetRunMessages": "true",
                "launchBrowser": true,
                "applicationUrl": "https://localhost:5001;http://localhost:5000;http://localhost:8090",
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development",
                  "SPRING:PROFILES:ACTIVE": "LocalMySQL"
                }
              },'
      condition: '#mysql'
  - include:
    - src/MyProjectGroup.DotnetAccelerator/bin/Debug/net6.0/config/solution-defaults.Development.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io'
      condition: '#enableSecurity'
  - include:
    - src/MyProjectGroup.Common/Persistence/DbType.cs
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if postgresql
                  PostgreSQL,
          #endif
        with: "''"
      condition: '!(#postgresql)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if postgresql
                  PostgreSQL,
          #endif
        with: "'        PostgreSQL,'"
      condition: '#postgresql'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if mysql
                  MySQL,
          #endif
        with: "''"
      condition: '!(#mysql)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if mysql
                  MySQL,
          #endif
        with: "'        MySQL,'"
      condition: '#mysql'
  - include:
    - src/MyProjectGroup.DotnetAccelerator/bin/Debug/net6.0/config/solution-defaults.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://accounts.google.com'
      condition: '#enableSecurity'
  - include:
    - src/MyProjectGroup.Common/Security/KnownAuthorizationPolicy.cs
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
                  public const string AirportRead = "airport.read";
                  public const string WeatherRead = "airport.read";
                  public const string WeatherWrite = "airport.read";
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
                  public const string AirportRead = "airport.read";
                  public const string WeatherRead = "airport.read";
                  public const string WeatherWrite = "airport.read";
          #endif
        with: |-
          '        public const string AirportRead = "airport.read";
                  public const string WeatherRead = "airport.read";
                  public const string WeatherWrite = "airport.read";'
      condition: '#enableSecurity'
  - include:
    - tests/DotnetAcceleratorTests/bin/Debug/net6.0/config/solution-defaults.Development.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io'
      condition: '#enableSecurity'
  - include:
    - tests/DotnetAcceleratorTests/bin/Debug/net6.0/config/solution-defaults.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://accounts.google.com'
      condition: '#enableSecurity'
  - include:
    - src/MyProjectGroup.DotnetAccelerator/bin/Debug/net6.0/ubuntu.18.04-x64/config/solution-defaults.Development.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io'
      condition: '#enableSecurity'
  - include:
    - src/MyProjectGroup.DotnetAccelerator/bin/Debug/net6.0/ubuntu.18.04-x64/config/solution-defaults.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://accounts.google.com'
      condition: '#enableSecurity'
  - include:
    - src/MyProjectGroup.DotnetAccelerator/Modules/AirportModule/AirportController.cs
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          using MyProjectGroup.Common.Security;
          #endif
        with: "''"
      - text: |-
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.AirportRead)]
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          using MyProjectGroup.Common.Security;
          #endif
        with: "'using MyProjectGroup.Common.Security;'"
      - text: |-
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.AirportRead)]
          #endif
        with: "'        [Authorize(KnownAuthorizationPolicy.AirportRead)]'"
      condition: '#enableSecurity'
  - include:
    - src/MyProjectGroup.DotnetAccelerator/Modules/WeatherModule/WeatherController.cs
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          using MyProjectGroup.Common.Security;
          #endif
        with: "''"
      - text: |-
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherRead)]
          #endif
        with: "''"
      - text: |-
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherWrite)]
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          using MyProjectGroup.Common.Security;
          #endif
        with: "'using MyProjectGroup.Common.Security;'"
      - text: |-
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherRead)]
          #endif
        with: "'        [Authorize(KnownAuthorizationPolicy.WeatherRead)]'"
      - text: |-
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherWrite)]
          #endif
        with: "'        [Authorize(KnownAuthorizationPolicy.WeatherWrite)]'"
      condition: '#enableSecurity'
  chain:
  - type: RewritePath
    regex: config/DotnetAccelerator-Development.yaml
    rewriteTo: "'config/' + #artifactId + '-Development.yaml'"
  - type: RewritePath
    regex: config/DotnetAccelerator-LocalMySQL.yaml
    rewriteTo: "'config/' + #artifactId + '-LocalMySQL.yaml'"
  - type: RewritePath
    regex: config/DotnetAccelerator-LocalPostgreSQL.yaml
    rewriteTo: "'config/' + #artifactId + '-LocalPostgreSQL.yaml'"
  - type: RewritePath
    regex: config/DotnetAccelerator-SQLite.yaml
    rewriteTo: "'config/' + #artifactId + '-SQLite.yaml'"
  - type: RewritePath
    regex: config/DotnetAccelerator.yaml
    rewriteTo: "'config/' + #artifactId + '.yaml'"
  - type: RewritePath
    regex: DotnetAccelerator.sln
    rewriteTo: "'' + #artifactId + '.sln'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Application.cs
    rewriteTo: "'src/' + #namespace + '.Common/Application.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/BootstrapLoggerFactory.cs
    rewriteTo: "'src/' + #namespace + '.Common/BootstrapLoggerFactory.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Configuration/ConfigurationBuilderExtensions.cs
    rewriteTo: "'src/' + #namespace + '.Common/Configuration/ConfigurationBuilderExtensions.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Messaging/IMessageBus.cs
    rewriteTo: "'src/' + #namespace + '.Common/Messaging/IMessageBus.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Messaging/MessageBus.cs
    rewriteTo: "'src/' + #namespace + '.Common/Messaging/MessageBus.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Messaging/MessageBusServiceCollectionExtensions.cs
    rewriteTo: "'src/' + #namespace + '.Common/Messaging/MessageBusServiceCollectionExtensions.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Modules/DomainException.cs
    rewriteTo: "'src/' + #namespace + '.Common/Modules/DomainException.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Modules/DomainExceptionFilter.cs
    rewriteTo: "'src/' + #namespace + '.Common/Modules/DomainExceptionFilter.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Modules/IService.cs
    rewriteTo: "'src/' + #namespace + '.Common/Modules/IService.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Modules/ServiceCollectionExtensions.cs
    rewriteTo: "'src/' + #namespace + '.Common/Modules/ServiceCollectionExtensions.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/MyProjectGroup.Common.csproj
    rewriteTo: "'src/' + #namespace + '.Common/' + #namespace + '.Common.csproj'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/NullLogProcessor.cs
    rewriteTo: "'src/' + #namespace + '.Common/NullLogProcessor.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Persistence/DbContextMigrationApplicationBuilderExtensions.cs
    rewriteTo: "'src/' + #namespace + '.Common/Persistence/DbContextMigrationApplicationBuilderExtensions.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Persistence/DbContextMigrator.cs
    rewriteTo: "'src/' + #namespace + '.Common/Persistence/DbContextMigrator.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Persistence/DbType.cs
    rewriteTo: "'src/' + #namespace + '.Common/Persistence/DbType.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Security/AuthorizationPolicyBuilderExtensions.cs
    rewriteTo: "'src/' + #namespace + '.Common/Security/AuthorizationPolicyBuilderExtensions.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Security/KnownAuthorizationPolicy.cs
    rewriteTo: "'src/' + #namespace + '.Common/Security/KnownAuthorizationPolicy.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Security/KnownScope.cs
    rewriteTo: "'src/' + #namespace + '.Common/Security/KnownScope.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Security/ServiceCollectionExtensions.cs
    rewriteTo: "'src/' + #namespace + '.Common/Security/ServiceCollectionExtensions.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/Swagger/SwaggerGenOptionsExtensions.cs
    rewriteTo: "'src/' + #namespace + '.Common/Swagger/SwaggerGenOptionsExtensions.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.Common/WebApplicationBuilderExtensions.cs
    rewriteTo: "'src/' + #namespace + '.Common/WebApplicationBuilderExtensions.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Dockerfile
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Dockerfile'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/AirportModule/AirportController.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/AirportModule/AirportController.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/AirportModule/AirportService.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/AirportModule/AirportService.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/AirportModule/AirportService.Handlers.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/AirportModule/AirportService.Handlers.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/AirportModule/Api/Airport.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/AirportModule/Api/Airport.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/AirportModule/Api/AirportQuery.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/AirportModule/Api/AirportQuery.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/AirportModule/Api/AirportQuery.MediatR.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/AirportModule/Api/AirportQuery.MediatR.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/HomeController.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/HomeController.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/WeatherModule/Api/WeatherForecast.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/WeatherModule/Api/WeatherForecast.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/WeatherModule/Api/WeatherForecast.MediatR.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/WeatherModule/Api/WeatherForecast.MediatR.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/WeatherModule/Api/WeatherForecastQuery.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/WeatherModule/Api/WeatherForecastQuery.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/WeatherModule/Api/WeatherForecastQuery.MediatR.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/WeatherModule/Api/WeatherForecastQuery.MediatR.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/WeatherModule/WeatherController.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/WeatherModule/WeatherController.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/WeatherModule/WeatherService.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/WeatherModule/WeatherService.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Modules/WeatherModule/WeatherService.Handlers.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Modules/WeatherModule/WeatherService.Handlers.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/MyProjectGroup.DotnetAccelerator.csproj
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/' + #namespace + '.' + #artifactId + '.csproj'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Persistence/DotnetAcceleratorContext.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Persistence/' + #artifactId + 'Context.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Program.cs
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Program.cs'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/Properties/launchSettings.json
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/Properties/launchSettings.json'"
  - type: RewritePath
    regex: src/MyProjectGroup.DotnetAccelerator/README.md
    rewriteTo: "'src/' + #namespace + '.' + #artifactId + '/README.md'"
  - type: RewritePath
    regex: tests/DotnetAcceleratorTests/DotnetAcceleratorTests.csproj
    rewriteTo: "'tests/' + #artifactId + 'Tests/' + #artifactId + 'Tests.csproj'"
  - type: RewritePath
    regex: tests/DotnetAcceleratorTests/IUseDbContext.cs
    rewriteTo: "'tests/' + #artifactId + 'Tests/IUseDbContext.cs'"
  - type: RewritePath
    regex: tests/DotnetAcceleratorTests/WeatherTests.cs
    rewriteTo: "'tests/' + #artifactId + 'Tests/WeatherTests.cs'"
  - type: ReplaceText
    substitutions:
    - text: MyProjectGroup
      with: '#namespace'
  - type: ReplaceText
    substitutions:
    - text: dotnetaccelerator
      with: '#sourceNameLower'
  - type: ReplaceText
    substitutions:
    - text: DotnetAccelerator
      with: '#artifactId'
